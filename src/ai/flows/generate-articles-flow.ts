
'use server';

/**
 * @fileOverview AI agent that generates multiple articles based on a topic.
 * 
 * - generateArticles - A function that generates articles.
 * - GenerateArticlesInput - The input type for the generateArticles function.
 * - GenerateArticlesOutput - The return type for the generateArticles function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';

// Helper function for slugifying text
function slugify(text: string) {
  return text
    .toString()
    .toLowerCase()
    .replace(/\s+/g, '-')           // Replace spaces with -
    .replace(/[^\w\-]+/g, '')       // Remove all non-word chars
    .replace(/\-\-+/g, '-')         // Replace multiple - with single -
    .replace(/^-+/, '')             // Trim - from start of text
    .replace(/-+$/, '');            // Trim - from end of text
}


const GenerateArticlesInputSchema = z.object({
  topic: z.string().describe('The topic to generate articles about.'),
  count: z.number().describe('The number of articles to generate.'),
});
export type GenerateArticlesInput = z.infer<typeof GenerateArticlesInputSchema>;

const ArticleSchema = z.object({
    title: z.string().describe('The Vietnamese title of the article.'),
    category: z.enum(['systems', 'security', 'networking', 'cloud']).describe('The category of the article.'),
    image_alt: z.string().describe('A brief, descriptive alternative text for the image, in English.'),
    excerpt: z.string().describe('A short, compelling summary of the article in Vietnamese, around 160 characters.'),
    content: z.string().describe('The full content of the article in HTML format, written in Vietnamese. Should include <p>, <h2>, <ul>, <pre><code> etc. The content must include exactly one <img> tag for the featured image, using a https://picsum.photos/1200/630 URL.'),
});

const GenerateArticlesOutputSchema = z.object({
    articles: z.array(ArticleSchema).describe('An array of generated articles.'),
});
export type GenerateArticlesOutput = z.infer<typeof GenerateArticlesOutputSchema>;


export async function generateArticles(
  input: GenerateArticlesInput
): Promise<GenerateArticlesOutput> {
  const llmResponse = await generateArticlesFlow(input);
  
  // Post-process the response to add fields not generated by the LLM
  const processedArticles = llmResponse.articles.map(article => {
    const slug = slugify(article.title);
    const imgRegex = /<img[^>]+src="([^">]+)"[^>]*>/;
    const match = article.content.match(imgRegex);
    const image = match ? match[1] : `https://picsum.photos/1200/630?random=${Math.floor(Math.random() * 100)}`;

    return {
      ...article,
      slug,
      author: 'KhanhNN',
      published_date: new Date().toISOString(),
      image,
    };
  });

  return { articles: processedArticles };
}


const prompt = ai.definePrompt({
  name: 'generateArticlesPrompt',
  input: { schema: GenerateArticlesInputSchema },
  output: { schema: GenerateArticlesOutputSchema },
  prompt: `You are an expert technical writer specializing in cloud computing, networking, security, and Linux systems.
Your audience is Vietnamese IT professionals and students.
Generate {{count}} distinct articles about the topic: "{{topic}}".
For each article, provide a Vietnamese title, assign a category from the allowed values, write a compelling excerpt, and create the full content in HTML format.
The tone should be professional, informative, and easy to understand.
The content for each article must be unique.
The content must include exactly one <img> tag for the featured image, using a https://picsum.photos/1200/630 URL with a unique random number.
Ensure all text is in Vietnamese.`,
});

const generateArticlesFlow = ai.defineFlow(
  {
    name: 'generateArticlesFlow',
    inputSchema: GenerateArticlesInputSchema,
    outputSchema: GenerateArticlesOutputSchema,
  },
  async (input) => {
    const { output } = await prompt(input);
    return output!;
  }
);
